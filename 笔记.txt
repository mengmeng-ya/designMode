面对对象的好处：
通过 封装、继承、多态 把程序的耦合度降低，
用设计模式使得程序更加的灵活，容易修改，并且易于复用。

UML 类图：
暂时不写


类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的抽象集合才是类。


策略模式：
它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，
不会影响到使用算法的客户。

装饰模式：
动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。

代理模式：
为其他对象提供一种代理以控制对这个对象的访问。

工厂方法模式：
定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。


外观模式：
为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用

观察者模式：
观察者模式又叫做 发布-订阅模式
定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。
这个主题对象在状态发生变化时，会通知所有的观察者对象，使它们能够自动更新自己。


### 面向对象七大原则

- 单一职责原则：一个类应该有且只有一个去改变它的理由，这意味着一个类应该只有一项工作。
- 开放封闭原则：对象或实体应该对扩展开放，对修改封闭。
- 里氏替换原则： 在对象 x 为类型 T 时 q(x) 成立，那么当 S 是 T 的子类时，对象 y 为类型 S 时 q(y) 也应成立。（即对父类的调用同样适用于子类）（子类型必须能够替换掉它们的父类型）
- 依赖倒置原则：高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于实现。
- 接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
- 迪米特法则:最少知识原则（Least Knowledge Principle 简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解,不和陌生人说话。英文简写为: LoD.
- 组合/聚合复用原则：合成（Composition，也有翻译成组合）和聚合（Aggregation），都是关联的特殊种类。聚合表示一种弱的“拥有”关系，体现的是 A 对象可以包含 B 对象，但 B 对象不是 A 对象的一部分；合成（组合）是一种强的“拥有”关系，体现了严格的部分与整体的关系，部分和整体的生命周期是一样的。